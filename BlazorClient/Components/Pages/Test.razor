@page "/test"
@rendermode InteractiveServer
@using AntDesign.TableModels
@using System.ComponentModel

<h3>Test</h3>

<Table  @ref="table"
        TItem="WeatherForecast"
        DataSource="@forecasts"
        Total="_total"
        OnChange="OnChange"
        @bind-PageIndex="_pageIndex"
        @bind-PageSize="_pageSize"
        @bind-SelectedRows="selectedRows">

    <Selection Key="@(context.Id.ToString())"/>
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Date" Sortable />
    <Column @bind-Field="@context.TemperatureC" Sortable />
    <Column @bind-Field="@context.TemperatureF" Sortable />
    <Column @bind-Field="@context.Summary" Sortable />
    <Column Title="Hot" Field="@context.Hot">
        <Switch @bind-Value="@context.Hot" />
    </Column>
    <ActionColumn>
        <Space>
            <SpaceItem>
                <Button Danger OnClick="() => Delete(context.Id)">Delete</Button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<p>
    PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total
</p>

<h5>
    Selected Items
</h5>

@if(selectedRows !=null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick = "@(e=> { selectedRows = null; })"> Clear </Button>
    foreach (var item in selectedRows)  
    {  
        <Tag @key="item.Id" Closable OnClose="@(e=>RemoveSelection(@item.Id))">@item.Id-@item.Summary</Tag>

    }
}

<br/>

<Button OnClick="()=> {_pageIndex--; }">Previous Page</Button>  
<Button OnClick="()=> {_pageIndex++; }">Next Page</Button>

@code {
    WeatherForecast[] forecasts;

    IEnumerable<WeatherForecast> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 8;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
    }

    private void Delete(int id)
    {
        forecasts = forecasts.Where(x => x.Id != id).ToArray();
        _total = _total - 1;

    }

    public void RemoveSelection(int id)
    {
        selectedRows = selectedRows.Where(x => x.Id != id);
    }

    async Task OnChange(QueryModel<WeatherForecast> queryModel)
    {
        forecasts = await GetWeatherForecastsAsync(queryModel.PageIndex, queryModel.PageSize);
        _pageIndex = queryModel.PageIndex;
        _pageSize = queryModel.PageSize;
        _total = 50;
    }

    private class WeatherForecast
    {
        public int Id { get; set; }
        public DateOnly Date { get; set; }
        [DisplayName("Temp. (C)")]
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF { get; set; }
        public bool Hot { get; set; }
    }

    private List<WeatherForecast> GetWeatherForecasts()
    {
        var rnd = new Random();
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        var forcastList = new List<WeatherForecast>();
        for (int i = 1; i <= 100; i++)
        {
            var r = rnd.Next(-20, 55);
            forcastList.Add(new WeatherForecast
            {
                Id = i,
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(i)),
                TemperatureC = r,
                Hot = r > 30,
                TemperatureF = 32 + (int)(r / 0.5556),
                Summary = summaries[Random.Shared.Next(summaries.Length)],
            });
        }
        return forcastList;
    }

    private Task<WeatherForecast[]> GetWeatherForecastsAsync(int pageInxdex, int pageSize)
    {
        var forcastList = GetWeatherForecasts().Skip((pageInxdex - 1) * pageSize).Take(pageSize).ToList();
        return Task.FromResult(forcastList.ToArray());
    }
}
